#!/usr/bin/env python
import os
import sys
import json
import uuid
import urllib
import urllib2
import time
import httplib


def usage():
    print "usage is: "
    print "notely add [message] - adds a note with message, opens an editor if message is empty"
    print "notely del id - deletes message with id matching the provided id"
    print "notely list - shows all notes"
    print "notely clear - deletes all notes"
    print "notely pair - starts notely pairing, will show you a pair code"
    print "notely pair [code] - ends notely pairing, syncs with the notely instance for a given share code"


NOTELY_FILE = os.environ["HOME"] + "/.notely"
NOTELY_ACTIONS_FILE = os.environ["HOME"] + "/.notely_actions"


def create_actions_file():
    if not os.path.exists(NOTELY_ACTIONS_FILE):
        obj = safe_load_notely_file()
        actions = []
        for note in obj["notes"]:
            actions.append({"add":note["message"], "time":time.time()})

        f = open(NOTELY_ACTIONS_FILE, "w")
        f.write(json.dumps({"actions":actions}))
        f.flush()
        f.close()

def save_actions_file(obj):
    f = open(NOTELY_ACTIONS_FILE, "w")
    f.write(json.dumps(obj))
    f.flush()
    f.close()

def load_notely_actions_file():
    return json.loads(open(NOTELY_ACTIONS_FILE).read())

def add_action(message):
    obj = load_notely_actions_file()
    obj["actions"].append({"add":message, "time":time.time()})
    save_actions_file(obj)

def delete_action(message):
    obj = load_notely_actions_file()
    obj["actions"].append({"del":message, "time":time.time()})
    save_actions_file(obj)

def safe_load_notely_file():
    try:
        f = open(NOTELY_FILE).read()
        obj = json.loads(f)
        return obj
    except:
        f = open(NOTELY_FILE, "w")
        f.write(json.dumps({"notes":[]}))
        f.flush()
        f.close()
        f = open(NOTELY_FILE).read()
        obj = json.loads(f)
        add_userid()
        return obj

def write_notely_dict(dictionary):
    f = open(NOTELY_FILE, "w")
    f.write(json.dumps(dictionary))
    f.close()

def set_userid(obj, user_id):
    obj["user-id"] = user_id 

def add_userid():
    obj = safe_load_notely_file()
    if not obj.has_key("user-id"):
        set_userid(obj, str(uuid.uuid4())) 
        write_notely_dict(obj)

def get_userid():
    obj = safe_load_notely_file()
    return obj["user-id"]

def patch_notely_file():
    add_userid()

def clear_notes():
    write_notely_dict({"notes":[]})

def get_highest_id(obj):
    ids = []

    for note in obj["notes"]:
        ids.append(int(note["id"]))

    width = 0

    if(len(ids) > 0):
        width = int(sorted(ids)[-1])

    return width

def add_note(message):
    obj = safe_load_notely_file()
    obj["notes"].append({"message": message, "id":get_highest_id(obj)+1})
    add_action(message)
    write_notely_dict(obj)

def list_notes():
    obj = safe_load_notely_file()
    if len(obj["notes"]) == 0:
        print "-- You haven't got any notely notes"
    else:
        width = len(str(get_highest_id(obj)))
        for note in obj["notes"]:
            strlen = len(str(note["id"]))
            spaces = width-strlen
            print note["id"]," " * (spaces),":",note["message"]

def delete_note(id):
    obj = safe_load_notely_file()
    new_notes = []
    message = None
    for note in obj["notes"]:
        if int(note["id"]) != id:
            new_notes.append(note)
        else:
            message = note["message"]

    if message != None:
        delete_action(message)
    obj["notes"] = new_notes
    write_notely_dict(obj)

HOST_NAME = "http://furious-cloud-9898.herokuapp.com" 

def start_pair():
    resp = urllib.urlopen(HOST_NAME + "/startpair/" + get_userid())
    obj = json.load(resp)
    print "type the following code into your other notely instance:",obj["code"]

def end_pair(code):
    resp = urllib.urlopen(HOST_NAME + "/endpair/" + code)
    net_obj = json.load(resp)
    notely_obj = safe_load_notely_file() 
    if (net_obj.has_key("err")):
        print net_obj["err"]
        exit(1)
    else:
        set_userid(notely_obj, net_obj["uuid"])
        write_notely_dict(notely_obj)
        print "successfully paired!"
            

def sync():
    url = HOST_NAME + "/sync"
    values = {
              "actions":json.dumps(load_notely_actions_file()), 
              "uuid":safe_load_notely_file()["user-id"]
             } 
    data = urllib.urlencode(values)          
    req = urllib2.Request(url, data)
    response = urllib2.urlopen(req)
    data = response.read() 
    json_data = json.loads(data)
    dict = {"user-id":json_data["user-id"],"notes":json_data["messages"]}
    write_notely_dict(dict)
    save_actions_file(json_data["actions"])



def main():
    create_actions_file()
    patch_notely_file()
    if len(sys.argv) < 2:
        usage()
    else:
        if sys.argv[1] == "add":
            if len(sys.argv) > 2:
                add_note(" ".join(sys.argv[2:]))
            else:
                f = open("/tmp/notely.note", "w")
                f.close()
                os.system("$EDITOR /tmp/notely.note");
                f = open("/tmp/notely.note")
                text = f.read().strip()
                if text == "":
                    print "Empty note provided, quitting"
                    exit(1)
                else:
                    add_note(text)
            
        if sys.argv[1] == "list":
            list_notes()
        if sys.argv[1] == "clear":
            clear_notes()
        if sys.argv[1] == "sync":
            sync()
        if sys.argv[1] == "pair":
            if len(sys.argv) == 2:
                start_pair()
            else:
                end_pair(sys.argv[2])
        if sys.argv[1] == "del":
            if len(sys.argv) == 2:
                usage()
            else:
                delete_note(int(sys.argv[2]))


if __name__ == "__main__":
    main()
